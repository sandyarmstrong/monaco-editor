{"version":3,"sources":["vs/languages/handlebars/common/fake","vs/languages/handlebars/common/handlebars.js","vs/languages/handlebars/common/file:/Users/sandy/random-code/vscode/src/vs/languages/handlebars/common/handlebarsTokenTypes.ts","vs/languages/handlebars/common/file:/Users/sandy/random-code/vscode/src/vs/languages/handlebars/common/handlebars.ts"],"names":["__m","__M","deps","result","i","len","length","define","require","exports","EMBED","EMBED_UNESCAPED","KEYWORD","VARIABLE","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","modes","htmlMode","handlebarsTokenTypes","instantiation_1","modeService_1","languageConfigurationRegistry_1","abstractMode_1","async_1","compatWorkerService_1","workspace_1","States","HandlebarsState","_super","mode","kind","handlebarsKind","lastTagName","lastAttributeName","embeddedContentType","attributeValueQuote","attributeValueLength","call","makeClone","getMode","equals","other","tokenize","stream","HTML","advanceIfString","UnescapedExpression","type","Expression","skipWhitespace","peek","advanceWhile","next","goBack","State","HandlebarsMode","descriptor","instantiationService","modeService","compatWorkerService","workspaceContextService","_registerSupports","_this","SuggestRegistry","register","getId","triggerCharacters","provideCompletionItems","model","position","token","wireCancellationToken","_provideCompletionItems","uri","DocumentHighlightProviderRegistry","provideDocumentHighlights","_provideDocumentHighlights","LinkProviderRegistry","provideLinks","LanguageConfigurationRegistry","LANG_CONFIG","getInitialState","Content","getLeavingNestedModeData","line","state","leavingNestedModeData","stateAfterNestedMode","wordPattern","createWordRegExp","comments","blockComment","brackets","__electricCharacterSupport","embeddedElectricCharacters","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","EMPTY_ELEMENTS","join","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","IInstantiationService","IModeService","ICompatWorkerService","IWorkspaceContextService","HTMLMode"],"mappings":"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","file":"vs/languages/handlebars/common/handlebars.js","sourcesContent":["}).call(this);","/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.5.3(36e67863cf6a6f202f5a80acff4146a695c48357)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n(function() {\nvar __m = [\"vs/languages/handlebars/common/handlebarsTokenTypes\",\"exports\",\"require\",\"vs/languages/handlebars/common/handlebars\",\"vs/editor/common/modes\",\"vs/languages/html/common/html\",\"vs/platform/workspace/common/workspace\",\"vs/editor/common/services/modeService\",\"vs/editor/common/modes/languageConfigurationRegistry\",\"vs/editor/common/modes/abstractMode\",\"vs/base/common/async\",\"vs/editor/common/services/compatWorkerService\",\"vs/platform/instantiation/common/instantiation\"];\nvar __M = function(deps) {\n  var result = [];\n  for (var i = 0, len = deps.length; i < len; i++) {\n    result[i] = __m[deps[i]];\n  }\n  return result;\n};\ndefine(__m[0], __M([2,1]), function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    exports.EMBED = 'punctuation.expression.unescaped.handlebars';\n    exports.EMBED_UNESCAPED = 'punctuation.expression.handlebars';\n    exports.KEYWORD = 'keyword.helper.handlebars';\n    exports.VARIABLE = 'variable.parameter.handlebars';\n});\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine(__m[3], __M([2,1,4,5,0,12,7,8,9,10,11,6]), function (require, exports, modes, htmlMode, handlebarsTokenTypes, instantiation_1, modeService_1, languageConfigurationRegistry_1, abstractMode_1, async_1, compatWorkerService_1, workspace_1) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    (function (States) {\n        States[States[\"HTML\"] = 0] = \"HTML\";\n        States[States[\"Expression\"] = 1] = \"Expression\";\n        States[States[\"UnescapedExpression\"] = 2] = \"UnescapedExpression\";\n    })(exports.States || (exports.States = {}));\n    var States = exports.States;\n    var HandlebarsState = (function (_super) {\n        __extends(HandlebarsState, _super);\n        function HandlebarsState(mode, kind, handlebarsKind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength) {\n            _super.call(this, mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength);\n            this.handlebarsKind = handlebarsKind;\n        }\n        HandlebarsState.prototype.makeClone = function () {\n            return new HandlebarsState(this.getMode(), this.kind, this.handlebarsKind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValueLength);\n        };\n        HandlebarsState.prototype.equals = function (other) {\n            if (other instanceof HandlebarsState) {\n                return (_super.prototype.equals.call(this, other));\n            }\n            return false;\n        };\n        HandlebarsState.prototype.tokenize = function (stream) {\n            switch (this.handlebarsKind) {\n                case States.HTML:\n                    if (stream.advanceIfString('{{{').length > 0) {\n                        this.handlebarsKind = States.UnescapedExpression;\n                        return { type: handlebarsTokenTypes.EMBED_UNESCAPED };\n                    }\n                    else if (stream.advanceIfString('{{').length > 0) {\n                        this.handlebarsKind = States.Expression;\n                        return { type: handlebarsTokenTypes.EMBED };\n                    }\n                    break;\n                case States.Expression:\n                case States.UnescapedExpression:\n                    if (this.handlebarsKind === States.Expression && stream.advanceIfString('}}').length > 0) {\n                        this.handlebarsKind = States.HTML;\n                        return { type: handlebarsTokenTypes.EMBED };\n                    }\n                    else if (this.handlebarsKind === States.UnescapedExpression && stream.advanceIfString('}}}').length > 0) {\n                        this.handlebarsKind = States.HTML;\n                        return { type: handlebarsTokenTypes.EMBED_UNESCAPED };\n                    }\n                    else if (stream.skipWhitespace().length > 0) {\n                        return { type: '' };\n                    }\n                    if (stream.peek() === '#') {\n                        stream.advanceWhile(/^[^\\s}]/);\n                        return { type: handlebarsTokenTypes.KEYWORD };\n                    }\n                    if (stream.peek() === '/') {\n                        stream.advanceWhile(/^[^\\s}]/);\n                        return { type: handlebarsTokenTypes.KEYWORD };\n                    }\n                    if (stream.advanceIfString('else')) {\n                        var next = stream.peek();\n                        if (next === ' ' || next === '\\t' || next === '}') {\n                            return { type: handlebarsTokenTypes.KEYWORD };\n                        }\n                        else {\n                            stream.goBack(4);\n                        }\n                    }\n                    if (stream.advanceWhile(/^[^\\s}]/).length > 0) {\n                        return { type: handlebarsTokenTypes.VARIABLE };\n                    }\n                    break;\n            }\n            return _super.prototype.tokenize.call(this, stream);\n        };\n        return HandlebarsState;\n    }(htmlMode.State));\n    exports.HandlebarsState = HandlebarsState;\n    var HandlebarsMode = (function (_super) {\n        __extends(HandlebarsMode, _super);\n        function HandlebarsMode(descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService) {\n            _super.call(this, descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService);\n        }\n        HandlebarsMode.prototype._registerSupports = function () {\n            var _this = this;\n            modes.SuggestRegistry.register(this.getId(), {\n                triggerCharacters: ['.', ':', '<', '\"', '=', '/'],\n                provideCompletionItems: function (model, position, token) {\n                    return async_1.wireCancellationToken(token, _this._provideCompletionItems(model.uri, position));\n                }\n            }, true);\n            modes.DocumentHighlightProviderRegistry.register(this.getId(), {\n                provideDocumentHighlights: function (model, position, token) {\n                    return async_1.wireCancellationToken(token, _this._provideDocumentHighlights(model.uri, position));\n                }\n            }, true);\n            modes.LinkProviderRegistry.register(this.getId(), {\n                provideLinks: function (model, token) {\n                    return async_1.wireCancellationToken(token, _this.provideLinks(model.uri));\n                }\n            }, true);\n            languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(this.getId(), HandlebarsMode.LANG_CONFIG);\n        };\n        HandlebarsMode.prototype.getInitialState = function () {\n            return new HandlebarsState(this, htmlMode.States.Content, States.HTML, '', '', '', '', 0);\n        };\n        HandlebarsMode.prototype.getLeavingNestedModeData = function (line, state) {\n            var leavingNestedModeData = _super.prototype.getLeavingNestedModeData.call(this, line, state);\n            if (leavingNestedModeData) {\n                leavingNestedModeData.stateAfterNestedMode = new HandlebarsState(this, htmlMode.States.Content, States.HTML, '', '', '', '', 0);\n            }\n            return leavingNestedModeData;\n        };\n        HandlebarsMode.LANG_CONFIG = {\n            wordPattern: abstractMode_1.createWordRegExp('#-?%'),\n            comments: {\n                blockComment: ['<!--', '-->']\n            },\n            brackets: [\n                ['<!--', '-->'],\n                ['{{', '}}']\n            ],\n            __electricCharacterSupport: {\n                embeddedElectricCharacters: ['*', '}', ']', ')']\n            },\n            autoClosingPairs: [\n                { open: '{', close: '}' },\n                { open: '[', close: ']' },\n                { open: '(', close: ')' },\n                { open: '\"', close: '\"' },\n                { open: '\\'', close: '\\'' }\n            ],\n            surroundingPairs: [\n                { open: '<', close: '>' },\n                { open: '\"', close: '\"' },\n                { open: '\\'', close: '\\'' }\n            ],\n            onEnterRules: [\n                {\n                    beforeText: new RegExp(\"<(?!(?:\" + htmlMode.EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n                    afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n                    action: { indentAction: modes.IndentAction.IndentOutdent }\n                },\n                {\n                    beforeText: new RegExp(\"<(?!(?:\" + htmlMode.EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n                    action: { indentAction: modes.IndentAction.Indent }\n                }\n            ],\n        };\n        HandlebarsMode = __decorate([\n            __param(1, instantiation_1.IInstantiationService),\n            __param(2, modeService_1.IModeService),\n            __param(3, compatWorkerService_1.ICompatWorkerService),\n            __param(4, workspace_1.IWorkspaceContextService)\n        ], HandlebarsMode);\n        return HandlebarsMode;\n    }(htmlMode.HTMLMode));\n    exports.HandlebarsMode = HandlebarsMode;\n});\n\n}).call(this);\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const EMBED = 'punctuation.expression.unescaped.handlebars';\nexport const EMBED_UNESCAPED = 'punctuation.expression.handlebars';\nexport const KEYWORD = 'keyword.helper.handlebars';\nexport const VARIABLE = 'variable.parameter.handlebars';","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport modes = require('vs/editor/common/modes');\nimport htmlMode = require('vs/languages/html/common/html');\nimport handlebarsTokenTypes = require('vs/languages/handlebars/common/handlebarsTokenTypes');\nimport htmlWorker = require('vs/languages/html/common/htmlWorker');\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {LanguageConfigurationRegistry, LanguageConfiguration} from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport {createWordRegExp} from 'vs/editor/common/modes/abstractMode';\nimport {ILeavingNestedModeData} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {wireCancellationToken} from 'vs/base/common/async';\nimport {ICompatWorkerService} from 'vs/editor/common/services/compatWorkerService';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\nexport enum States {\n\tHTML,\n\tExpression,\n\tUnescapedExpression\n}\n\nexport class HandlebarsState extends htmlMode.State {\n\n\tconstructor(mode:modes.IMode,\n\t\tkind:htmlMode.States,\n\t\tpublic handlebarsKind:States,\n\t\tlastTagName:string,\n\t\tlastAttributeName:string,\n\t\tembeddedContentType:string,\n\t\tattributeValueQuote:string,\n\t\tattributeValueLength:number) {\n\n\t\tsuper(mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength);\n\t}\n\n\tpublic makeClone(): HandlebarsState {\n\t\treturn new HandlebarsState(this.getMode(), this.kind, this.handlebarsKind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValueLength);\n\t}\n\n\tpublic equals(other:modes.IState):boolean {\n\t\tif (other instanceof HandlebarsState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:modes.IStream) : modes.ITokenizationResult {\n\t\tswitch(this.handlebarsKind) {\n\t\t\tcase States.HTML:\n\t\t\t\tif (stream.advanceIfString('{{{').length > 0) {\n\t\t\t\t\tthis.handlebarsKind = States.UnescapedExpression;\n\t\t\t\t\treturn { type: handlebarsTokenTypes.EMBED_UNESCAPED };\n\t\t\t\t}\n\t\t\t\telse if (stream.advanceIfString('{{').length > 0) {\n\t\t\t\t\tthis.handlebarsKind = States.Expression;\n\t\t\t\t\treturn { type: handlebarsTokenTypes.EMBED };\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t\tcase States.Expression:\n\t\t\tcase States.UnescapedExpression:\n\t\t\t\tif (this.handlebarsKind === States.Expression && stream.advanceIfString('}}').length > 0) {\n\t\t\t\t\tthis.handlebarsKind = States.HTML;\n\t\t\t\t\treturn { type: handlebarsTokenTypes.EMBED };\n\t\t\t\t}\n\t\t\t\telse if (this.handlebarsKind === States.UnescapedExpression &&stream.advanceIfString('}}}').length > 0) {\n\t\t\t\t\tthis.handlebarsKind = States.HTML;\n\t\t\t\t\treturn { type: handlebarsTokenTypes.EMBED_UNESCAPED };\n\t\t\t\t}\n\t\t\t\telse if(stream.skipWhitespace().length > 0) {\n\t\t\t\t\treturn { type: ''};\n\t\t\t\t}\n\n\t\t\t\tif(stream.peek() === '#') {\n\t\t\t\t\tstream.advanceWhile(/^[^\\s}]/);\n\t\t\t\t\treturn { type: handlebarsTokenTypes.KEYWORD };\n\t\t\t\t}\n\n\t\t\t\tif(stream.peek() === '/') {\n\t\t\t\t\tstream.advanceWhile(/^[^\\s}]/);\n\t\t\t\t\treturn { type: handlebarsTokenTypes.KEYWORD };\n\t\t\t\t}\n\n\t\t\t\tif(stream.advanceIfString('else')) {\n\t\t\t\t\tvar next = stream.peek();\n\t\t\t\t\tif(next === ' ' || next === '\\t' || next === '}') {\n\t\t\t\t\t\treturn { type: handlebarsTokenTypes.KEYWORD };\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tstream.goBack(4);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(stream.advanceWhile(/^[^\\s}]/).length > 0) {\n\t\t\t\t\treturn { type: handlebarsTokenTypes.VARIABLE };\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn super.tokenize(stream);\n\t}\n}\n\nexport class HandlebarsMode extends htmlMode.HTMLMode<htmlWorker.HTMLWorker> {\n\n\tpublic static LANG_CONFIG:LanguageConfiguration = {\n\t\twordPattern: createWordRegExp('#-?%'),\n\n\t\tcomments: {\n\t\t\tblockComment: ['<!--', '-->']\n\t\t},\n\n\t\tbrackets: [\n\t\t\t['<!--', '-->'],\n\t\t\t['{{', '}}']\n\t\t],\n\n\t\t__electricCharacterSupport: {\n\t\t\tembeddedElectricCharacters: ['*', '}', ']', ')']\n\t\t},\n\n\t\tautoClosingPairs: [\n\t\t\t{ open: '{', close: '}' },\n\t\t\t{ open: '[', close: ']' },\n\t\t\t{ open: '(', close: ')' },\n\t\t\t{ open: '\"', close: '\"' },\n\t\t\t{ open: '\\'', close: '\\'' }\n\t\t],\n\n\t\tsurroundingPairs: [\n\t\t\t{ open: '<', close: '>' },\n\t\t\t{ open: '\"', close: '\"' },\n\t\t\t{ open: '\\'', close: '\\'' }\n\t\t],\n\n\t\tonEnterRules: [\n\t\t\t{\n\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\tafterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n\t\t\t\taction: { indentAction: modes.IndentAction.IndentOutdent }\n\t\t\t},\n\t\t\t{\n\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\taction: { indentAction: modes.IndentAction.Indent }\n\t\t\t}\n\t\t],\n\t};\n\n\tconstructor(\n\t\tdescriptor:modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModeService modeService: IModeService,\n\t\t@ICompatWorkerService compatWorkerService: ICompatWorkerService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper(descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService);\n\t}\n\n\tprotected _registerSupports(): void {\n\t\tmodes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: ['.', ':', '<', '\"', '=', '/'],\n\t\t\tprovideCompletionItems: (model, position, token): Thenable<modes.ISuggestResult> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideCompletionItems(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.DocumentHighlightProviderRegistry.register(this.getId(), {\n\t\t\tprovideDocumentHighlights: (model, position, token): Thenable<modes.DocumentHighlight[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideDocumentHighlights(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.LinkProviderRegistry.register(this.getId(), {\n\t\t\tprovideLinks: (model, token): Thenable<modes.ILink[]> => {\n\t\t\t\treturn wireCancellationToken(token, this.provideLinks(model.uri));\n\t\t\t}\n\t\t}, true);\n\n\t\tLanguageConfigurationRegistry.register(this.getId(), HandlebarsMode.LANG_CONFIG);\n\t}\n\n\tpublic getInitialState() : modes.IState {\n\t\treturn new HandlebarsState(this, htmlMode.States.Content, States.HTML, '', '', '', '', 0);\n\t}\n\n\tpublic getLeavingNestedModeData(line:string, state:modes.IState):ILeavingNestedModeData {\n\t\tvar leavingNestedModeData = super.getLeavingNestedModeData(line, state);\n\t\tif (leavingNestedModeData) {\n\t\t\tleavingNestedModeData.stateAfterNestedMode = new HandlebarsState(this, htmlMode.States.Content, States.HTML, '', '', '', '', 0);\n\t\t}\n\t\treturn leavingNestedModeData;\n\t}\n}\n"]}